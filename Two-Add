//public class ListNode {
//	int val;
//	ListNode next;
//
//	public ListNode(int x) {
//		val = x;
//	}
//}
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
      	int value1 = l1.val, value2 = l2.val, value = l1.val + l2.val, location = 0;
		if (value >= 10) {
			value -= 10;
			location = 1;
		}
		ListNode ptr1 = l1.next;
		ListNode ptr2 = l2.next;
		ListNode l3 = new ListNode(value);
		ListNode temp = l3;
		while (ptr1 != null && ptr2 != null) {
			value = ptr1.val + ptr2.val + location;
			if (value >= 10) {
				value -= 10;
				temp.next = new ListNode(value);
				temp = temp.next;
				location = 1;
			} else {
				temp.next = new ListNode(value);
				temp = temp.next;
				location = 0;
			}
			ptr1 = ptr1.next;
			ptr2 = ptr2.next;
		}
		if (ptr1 == null) {
			while (ptr2 != null) {
				value = ptr2.val + location;
				if (value >= 10) {
					value -= 10;
					temp.next = new ListNode(value);
					location = 1;
				} else {
					temp.next = new ListNode(value);
					location = 0;
				}
				ptr2 = ptr2.next;
				temp = temp.next;
			}
			if (location == 1) {
				temp.next = new ListNode(1);
			}
		} else {
			while (ptr1 != null) {
				value = ptr1.val + location;
				if (value >= 10) {
					value -= 10;
					temp.next = new ListNode(value);
					location = 1;
				} else {
					temp.next = new ListNode(value);
					location = 0;
				}
				ptr1 = ptr1.next;
				temp = temp.next;
			}
			if (location == 1) {
				temp.next = new ListNode(1);
			}
		}
		return l3;
	    }
}
